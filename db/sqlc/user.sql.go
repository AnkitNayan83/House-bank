// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const changePassword = `-- name: ChangePassword :one
UPDATE users 
SET hashed_password = $2, password_changed_at = $3
WHERE username = $1
RETURNING username, hashed_password, full_name, email, email_verified_at, password_changed_at, created_at
`

type ChangePasswordParams struct {
	Username          string             `json:"username"`
	HashedPassword    string             `json:"hashed_password"`
	PasswordChangedAt pgtype.Timestamptz `json:"password_changed_at"`
}

func (q *Queries) ChangePassword(ctx context.Context, arg ChangePasswordParams) (User, error) {
	row := q.db.QueryRow(ctx, changePassword, arg.Username, arg.HashedPassword, arg.PasswordChangedAt)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.EmailVerifiedAt,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    username,
    hashed_password,
    full_name,
    email
) VALUES (
    $1,
    $2,
    $3,
    $4
) RETURNING username, hashed_password, full_name, email, email_verified_at, password_changed_at, created_at
`

type CreateUserParams struct {
	Username       string `json:"username"`
	HashedPassword string `json:"hashed_password"`
	FullName       string `json:"full_name"`
	Email          string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.HashedPassword,
		arg.FullName,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.EmailVerifiedAt,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT username, hashed_password, full_name, email, email_verified_at, password_changed_at, created_at FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.EmailVerifiedAt,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT username, hashed_password, full_name, email, email_verified_at, password_changed_at, created_at FROM users
WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.EmailVerifiedAt,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateUserEmailVerification = `-- name: UpdateUserEmailVerification :one
UPDATE users 
set email_verified_at = $2
WHERE username = $1
RETURNING username, hashed_password, full_name, email, email_verified_at, password_changed_at, created_at
`

type UpdateUserEmailVerificationParams struct {
	Username        string             `json:"username"`
	EmailVerifiedAt pgtype.Timestamptz `json:"email_verified_at"`
}

func (q *Queries) UpdateUserEmailVerification(ctx context.Context, arg UpdateUserEmailVerificationParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserEmailVerification, arg.Username, arg.EmailVerifiedAt)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.EmailVerifiedAt,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}
